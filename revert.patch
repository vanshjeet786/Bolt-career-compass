diff --git a/src/components/Assessment/QuestionCard.tsx b/src/components/Assessment/QuestionCard.tsx
index 220bf04..3bca5ff 100644
--- a/src/components/Assessment/QuestionCard.tsx
+++ b/src/components/Assessment/QuestionCard.tsx
@@ -1,14 +1,14 @@
 import React, { useState, useEffect } from 'react';
 import { HelpCircle, Lightbulb, ChevronDown, ChevronUp, Sparkles } from 'lucide-react';
-import { Question, AssessmentResponse } from '@/types';
-import { Card } from '@/components/ui/Card';
-import { Button } from '@/components/ui/Button';
-import { aiService } from '@/services/aiService';
+import { Question, AssessmentResponse } from '../../types';
+import { Card } from '../ui/Card';
+import { Button } from '../ui/Button';
+import { aiService } from '../../services/aiService';

 interface QuestionCardProps {
   question: Question;
-  onAnswer: (questionId: string, answer: number | string | string[]) => void;
-  currentAnswer?: number | string | string[];
+  onAnswer: (questionId: string, answer: number | string) => void;
+  currentAnswer?: number | string;
   layerId: string;
   categoryId: string;
   userScores?: Record<string, number>;
@@ -47,8 +47,8 @@ export const QuestionCard: React.FC<QuestionCardProps> = ({
   const [loadingDetailedExplanation, setLoadingDetailedExplanation] = useState(false);
   const [loadingSuggestion, setLoadingSuggestion] = useState(false);
   const [careerInputs, setCareerInputs] = useState<string[]>(['', '', '']);
-  const [openEndedInput, setOpenEndedInput] = useState<string>('');

+  // Reset all states when answer is selected or question changes
   useEffect(() => {
     setShowExplanation(false);
     setShowDetailedExplanation(false);
@@ -58,168 +58,13 @@ export const QuestionCard: React.FC<QuestionCardProps> = ({
     setSuggestions([]);
     setSuggestionExplanation('');
     setSelectedSuggestionIndex(0);
-
-    if (question.type === 'open-ended') {
-      if (question.id === 'l6-synth-4') {
-        const initialCareers = Array.isArray(currentAnswer) ? currentAnswer : ['', '', ''];
-        setCareerInputs(initialCareers.slice(0, 3).concat(['', '', '']).slice(0, 3));
-      } else {
-        setOpenEndedInput(typeof currentAnswer === 'string' ? currentAnswer : '');
-      }
-    }
-  }, [question, currentAnswer]);
-
-  const handleOpenEndedChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
-    setOpenEndedInput(e.target.value);
-    onAnswer(question.id, e.target.value);
-  };
-
-  const handleCareerInputChange = (index: number, value: string) => {
-    const newInputs = [...careerInputs];
-    newInputs[index] = value;
-    setCareerInputs(newInputs);
-    onAnswer(question.id, newInputs);
-  };
-
-  const handleGetExplanation = () => {
-    const staticExplanation = aiService.getQuestionExplanation(question, layerId, categoryId);
-    setExplanation(staticExplanation);
-    setShowExplanation(!showExplanation);
-    setShowDetailedExplanation(false);
-  };
-
-  const handleGetDetailedExplanation = async () => {
-    if (showDetailedExplanation) {
-      setShowDetailedExplanation(false);
-      return;
-    }
-    setLoadingDetailedExplanation(true);
-    try {
-      const detailed = await aiService.explainQuestionDetailed(question, layerId, categoryId, allUserResponses);
-      setDetailedExplanation(detailed);
-      setShowDetailedExplanation(true);
-    } catch (error) {
-      console.error('Failed to get detailed explanation:', error);
-      setDetailedExplanation('Could not load detailed explanation.');
-    } finally {
-      setLoadingDetailedExplanation(false);
-    }
-  };
-
-  const handleGetSuggestion = async () => {
-    if (suggestions.length > 0) {
-      setShowSuggestion(!showSuggestion);
-      return;
+
+    // Initialize career inputs for the specific question
+    if (question.id === 'l6-synth-4' && Array.isArray(currentAnswer)) {
+      setCareerInputs(currentAnswer.length >= 3 ? currentAnswer.slice(0, 3) : [...currentAnswer, ...Array(3 - currentAnswer.length).fill('')]);
+    } else if (question.id === 'l6-synth-4') {
+      setCareerInputs(['', '', '']);
     }
-    setLoadingSuggestion(true);
-    try {
-      const result = await aiService.suggestAnswer(
-        question,
-        userScores,
-        careers,
-        previousAssessments,
-        allUserResponses
-      );
-      setSuggestions(result.suggestions);
-      setSuggestionExplanation(result.explanation);
-      setShowSuggestion(true);
-    } catch (error) {
-      console.error('Failed to get AI suggestion:', error);
-      setSuggestions(['Could not load suggestion.']);
-    } finally {
-      setLoadingSuggestion(false);
-    }
-  };
-
-  const cycleSuggestion = (direction: 'next' | 'prev') => {
-    const newIndex = direction === 'next'
-      ? (selectedSuggestionIndex + 1) % suggestions.length
-      : (selectedSuggestionIndex - 1 + suggestions.length) % suggestions.length;
-    setSelectedSuggestionIndex(newIndex);
-  };
-
-  return (
-    <Card className="animate-fade-in" padding="lg">
-      <p className="text-xl text-gray-700 mb-8 text-center">{question.text}</p>
-
-      {question.type === 'likert' && (
-        <div className="grid grid-cols-1 md:grid-cols-5 gap-3">
-          {LIKERT_OPTIONS.map(({ value, label }) => (
-            <Button
-              key={value}
-              variant={currentAnswer === value ? 'primary' : 'outline'}
-              onClick={() => onAnswer(question.id, value)}
-              className="w-full"
-            >
-              {label}
-            </Button>
-          ))}
-        </div>
-      )}
-
-      {question.type === 'open-ended' && question.id === 'l6-synth-4' && (
-        <div className="space-y-4">
-          {careerInputs.map((input, index) => (
-            <input
-              key={index}
-              type="text"
-              placeholder={`Career Interest #${index + 1}`}
-              value={input}
-              onChange={(e) => handleCareerInputChange(index, e.target.value)}
-              className="w-full p-3 border border-gray-300 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200"
-            />
-          ))}
-        </div>
-      )}
-
-      {question.type === 'open-ended' && question.id !== 'l6-synth-4' && (
-        <textarea
-          value={openEndedInput}
-          onChange={handleOpenEndedChange}
-          placeholder="Your reflections here..."
-          className="w-full p-3 border border-gray-300 rounded-lg focus:border-primary-500 focus:ring-2 focus:ring-primary-200"
-          rows={5}
-        />
-      )}
-
-      <div className="flex items-center justify-center gap-4 mt-8">
-        <Button variant="ghost" icon={HelpCircle} onClick={handleGetExplanation}>
-          Why is this asked?
-        </Button>
-        <Button variant="ghost" icon={Lightbulb} onClick={handleGetDetailedExplanation} loading={loadingDetailedExplanation}>
-          Explain Deeper
-        </Button>
-        {question.type === 'open-ended' && (
-          <Button variant="ghost" icon={Sparkles} onClick={handleGetSuggestion} loading={loadingSuggestion}>
-            AI Suggestion
-          </Button>
-        )}
-      </div>
-
-      {showExplanation && (
-        <div className="mt-6 p-4 bg-gray-50 rounded-lg border border-gray-200 animate-fade-in">
-          <p className="text-gray-700">{explanation}</p>
-        </div>
-      )}
-
-      {showDetailedExplanation && (
-        <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200 animate-fade-in">
-          <p className="text-blue-800 whitespace-pre-wrap">{detailedExplanation}</p>
-        </div>
-      )}
-
-      {showSuggestion && suggestions.length > 0 && (
-        <div className="mt-6 p-4 bg-purple-50 rounded-lg border border-purple-200 animate-fade-in">
-          <p className="text-purple-800 whitespace-pre-wrap">{suggestions[selectedSuggestionIndex]}</p>
-          {suggestions.length > 1 && (
-             <div className="flex justify-end gap-2 mt-2">
-               <Button size="sm" variant="ghost" onClick={() => cycleSuggestion('prev')}>Prev</Button>
-               <Button size="sm" variant="ghost" onClick={() => cycleSuggestion('next')}>Next</Button>
-             </div>
-          )}
-        </div>
-      )}
-    </Card>
-  );
-};
+  }, [currentAnswer, question.id]);

+  const
\ No newline at end of file
diff --git a/src/pages/DashboardPage.tsx b/src/pages/DashboardPage.tsx
index f645e5d..cd56afa 100644
--- a/src/pages/DashboardPage.tsx
+++ b/src/pages/DashboardPage.tsx
@@ -1,7 +1,7 @@
-import React, { useState } from 'react';
-import { User, Assessment } from '@/types';
-import { Card } from '@/components/ui/Card';
-import { Button } from '@/components/ui/Button';
+import React, { useState, useEffect } from 'react';
+import { User, Assessment } from '../types';
+import { Card } from '../components/ui/Card';
+import { Button } from '../components/ui/Button';
 import { BarChart3, Calendar, TrendingUp, Award, Target, BookOpen, Users, ArrowRight, Plus, Eye, Play, AlertCircle } from 'lucide-react';

 interface DashboardPageProps {
@@ -20,7 +20,7 @@ export const DashboardPage: React.FC<DashboardPageProps> = ({
   hasInProgressAssessment,
   onStartNewAssessment,
   onResumeAssessment,
-  onViewResults,
+  onViewResults
   loadingAssessments
 }) => {
   const [selectedTimeframe, setSelectedTimeframe] = useState<'all' | '6months' | '1year'>('all');
@@ -36,15 +36,15 @@ export const DashboardPage: React.FC<DashboardPageProps> = ({
     }

     return assessments.filter(assessment =>
-      new Date(assessment.completed_at) >= cutoffDate
+      new Date(assessment.completedAt) >= cutoffDate
     );
   };

   const getProgressInsights = () => {
     if (assessments.length < 2) return null;

-    const latest = assessments[0]; // newest is at the start
-    const previous = assessments[1];
+    const latest = assessments[assessments.length - 1];
+    const previous = assessments[assessments.length - 2];

     const latestScores = latest.scores as Record<string, number>;
     const previousScores = previous.scores as Record<string, number>;
@@ -67,7 +67,7 @@ export const DashboardPage: React.FC<DashboardPageProps> = ({
   const getTopStrengths = () => {
     if (assessments.length === 0) return [];

-    const latestAssessment = assessments[0];
+    const latestAssessment = assessments[assessments.length - 1];
     const scores = latestAssessment.scores as Record<string, number>;

     return Object.entries(scores)
@@ -185,7 +185,7 @@ export const DashboardPage: React.FC<DashboardPageProps> = ({
               <Target className="w-6 h-6 text-white" />
             </div>
             <h3 className="text-2xl font-bold text-pink-600">
-              {assessments.length > 0 ? assessments[0].recommendedCareers.length : 0}
+              {assessments.length > 0 ? assessments[assessments.length - 1].recommendedCareers.length : 0}
             </h3>
             <p className="text-gray-600">Career Matches</p>
           </Card>
@@ -218,7 +218,7 @@ export const DashboardPage: React.FC<DashboardPageProps> = ({
                 </div>
               ) : filteredAssessments.length > 0 ? (
                 <div className="space-y-4">
-                  {filteredAssessments.slice(0, 5).map((assessment) => (
+                  {filteredAssessments.slice(-5).reverse().map((assessment, index) => (
                     <div
                       key={assessment.id}
                       className="flex items-center justify-between p-4 bg-gradient-to-r from-gray-50 to-primary-50 rounded-lg hover:shadow-md transition-shadow"
@@ -229,7 +229,7 @@ export const DashboardPage: React.FC<DashboardPageProps> = ({
                         </div>
                         <div>
                           <h3 className="font-semibold text-gray-800">
-                            Assessment #{assessments.length - assessments.indexOf(assessment)}
+                            Assessment #{filteredAssessments.length - index}
                           </h3>
                           <p className="text-sm text-gray-600">
                             Completed on {new Date(assessment.completed_at).toLocaleDateString()}
@@ -292,7 +292,7 @@ export const DashboardPage: React.FC<DashboardPageProps> = ({
                       <p className="text-gray-600">Total Assessments</p>
                       {assessments.length > 0 && (
                         <p className="text-sm text-gray-500 mt-2">
-                          Last: {new Date(assessments[0].completed_at).toLocaleDateString()}
+                          Last: {new Date(assessments[assessments.length - 1].completedAt).toLocaleDateString()}
                         </p>
                       )}
                     </div>
@@ -347,7 +347,7 @@ export const DashboardPage: React.FC<DashboardPageProps> = ({
                     variant="outline"
                     className="w-full justify-start"
                     icon={Eye}
-                    onClick={() => onViewResults(assessments[0])}
+                    onClick={() => onViewResults(assessments[assessments.length - 1])}
                   >
                     View Latest Results
                   </Button>
@@ -394,5 +394,4 @@ export const DashboardPage: React.FC<DashboardPageProps> = ({
       </div>
     </div>
   );
-};
-
+};
\ No newline at end of file
